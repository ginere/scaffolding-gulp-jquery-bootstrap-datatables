{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/js/ConsolidatedView.js","app/js/Editor.js","app/js/GlobalProperties.js","app/js/KeyboardEvents.js","app/js/Overlay.js","app/js/Store.js","app/js/Tree.js","app/js/Viewport.js","app/js/app.js","node_modules/diff/src/convert/dmp.js","node_modules/diff/src/convert/xml.js","node_modules/diff/src/diff/array.js","node_modules/diff/src/diff/base.js","node_modules/diff/src/diff/character.js","node_modules/diff/src/diff/css.js","node_modules/diff/src/diff/json.js","node_modules/diff/src/diff/line.js","node_modules/diff/src/diff/sentence.js","node_modules/diff/src/diff/word.js","node_modules/diff/src/index.js","node_modules/diff/src/patch/apply.js","node_modules/diff/src/patch/create.js","node_modules/diff/src/patch/parse.js","node_modules/diff/src/util/distance-iterator.js","node_modules/diff/src/util/params.js","node_modules/process/browser.js","node_modules/q/q.js"],"names":[],"mappingscA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AChjhgCCnFgB,mB,GAAA,mB;;AAAT,SAAS,mBAAT,CAA6B,OAA7B,EAAsC;AAC3C,MAAI,MAAM,EAAV;AAAA,MACI,S,yBAAA,M,wBADJ;AAAA,MAEI,Y,yBAAA,M,wBAFJ;AAGA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,aAAS,QAAQ,CAAR,CAAT;AACA,QAAI,OAAO,KAAX,EAAkB;AAChB,kBAAY,CAAZ;AACD,KAFD,MAEO,IAAI,OAAO,OAAX,EAAoB;AACzB,kBAAY,CAAC,CAAb;AACD,KAFM,MAEA;AACL,kBAAY,CAAZ;AACD;;AAED,QAAI,IAAJ,CAAS,CAAC,SAAD,EAAY,OAAO,KAAnB,CAAT;AACD;AACD,SAAO,GAAP;AACD;;;;;;;gCClBe,mB,GAAA,mB;AAAT,SAAS,mBAAT,CAA6B,OAA7B,EAAsC;AAC3C,MAAI,MAAM,EAAV;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EA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AAL,EAAuB;AACrB,sBAAc,IAAd;AACD;;;;AAID,UAAI,WAAW,QAAQ,WAAvB,EAAoC;AAClC,eAAO,CAAC,aAAR;AACD;;AAED,0BAAoB,IAApB;AACA,aAAO,UAAP;AACD;;;;AAIF,GAlCD;AAmCD,C;;;;;;;gCC5Ce,e,GAAA,e;AAAT,SAAS,eAAT,CAAyB,OAAzB,EAAkC,QAAlC,EAA4C;AACjD,MAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,aAAS,QAAT,GAAoB,OAApB;AACD,GAFD,MAEO,IAAI,OAAJ,EAAa;AAClB,SAAK,IAAI,IAAT,IAAiB,OAAjB,EAA0B;;AAExB,UAAI,QAAQ,cAAR,CAAuB,IAAvB,CAAJ,EAAkC;AAChC,iBAAS,IAAT,IAAiB,QAAQ,IAAR,CAAjB;AACD;AACF;AACF;AACD,SAAO,QAAP;AACD;;;;ACZD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The Editor main class\n *\n * - The entry point is the render \n */\n'use strict';\n\n/*global document:false, sessionStorage: false, console: false, alert: false, $: false, window: false, jQuery:false,  location:false, debugger:false, navigator:false */\n\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar Store = require('./Store');\n\nvar SINGLETON={};\n\n\nSINGLETON.render=function(_element,column){\n\n\tif (!column){\n\t\treturn ;\n\t}\n\n\tvar el=$(_element);\n\n\tif (el.length<=0){\n\t\treturn ;\t\t\n\t}\n\n\tvar html=\"\";\n\tStore.iterate(function(index,row){\n\t\tvar value=row[column];\n\n\t\tif (value && $.isArray(value)) {\n\t\t\tvar ret=\"\";\n\t\t\tvalue.forEach(function(part){\n\t\t\t\t// green for additions, red for deletions\n\t\t\t\t// grey for common parts\n\t\t\t\tvar color = part.added ? 'green' :\n\t\t\t\t\tpart.removed ? 'red' : 'grey';\n\t\t\t\t\n\t\t\t\tret+='<span style=\"color:'+color+'\">'+part.value+'</span>';\n\t\t\t});\n\t\t\thtml+=\"<p>\"+ret+\"</p>\";\n\t\t} else if (value){\n\t\t\thtml+=\"<p>\"+value+\"</p>\";\n\t\t} else {\n\t\t\thtml+=\"<p>\"+row[\"ep\"]+\"</p>\";\n\t\t}\n\t});\n\n\tif (html){\n\t\tel.html(html);\n\t}\n\t\n};\n\n\nmodule.exports=SINGLETON;\n","/**\n * This contains the 4 columns editor\n *\n * - The entry point is the render \n */\n'use strict';\n\n/*global document:false, sessionStorage: false, console: false, alert: false, $: false, window: false, jQuery:false,  location:false, debugger:false, navigator:false */\n\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar JsDiff = require('diff');\n\nvar Store = require('./Store');\n\nvar KeyboardEvents=require('./KeyboardEvents');\nvar Viewport=require('./Viewport');\n\nvar SINGLETON={};\n\nvar el;\nvar table;\nvar viewport;\n\nvar currentRow=null;\nvar currentId=null;\nvar currentRowIndex=null;\n\nvar doDiffing=false;\n\n// var DEFAULT_DT_CONFIG={\n// \t// ~/projects/ppms/wireframe/src/js/lib/page.js\n// \t// http://datatables.net/manual/i18n\n// \tlanguage: {\n// \t\tsearch: ppms.label.filter,\n// \t\t\"processing\": \"Hang on. Waiting for response...\",\n// \t\t\"loadingRecords\":   \"Loading...  ..\"\n// \t}\n// \t, stateSave: true\n// \t, buttons: [{\n// \t\textend:    'colvis'\n// \t\t, text:      '<i class=\"fa fa-eye\"></i> View'\n// \t\t, titleAttr: 'Column Visibility'\n// \t\t, columns:'.column-toggle'\n// \t\t, postfixButtons: [ 'colvisRestore' ]\n// \t\t/*\n// \t\t\t\t},{\n// \t\t\t\t\textend:    'copyHtml5'\n// \t\t\t\t\t, text:      '<i class=\"fa fa-files-o\"></i> Copy'\n// \t\t\t\t\t, titleAttr: 'Copy to clipboard'\n// \t\t\t\t\t, exportOptions: {\n// \t\t\t\t\t\tcolumns: ':visible'\t\t\t\t\t\t\t\t\t\t\t\t\n// \t\t\t\t\t}\n// \t\t\t\t\t, altAction:getServerExportCB()\n// \t\t*/\n// \t},{\n// \t\textend:    'excelHtml5'\n// \t\t, text:      '<i class=\"fa fa-file-excel-o\"></i> Excel'\n// \t\t, titleAttr: 'Export Excel'\n// \t\t, exportOptions: {\n// \t\t\tcolumns: ':visible'\n// \t\t}\n// \t\t, altAction:getServerExportCB()\n// \t},{\n// \t\textend:    'print'\n// \t\t, text:      '<i class=\"fa fa-print\"></i> Print'\n// \t\t, titleAttr: 'Print page'\t\t\t\t\t\n// \t\t, exportOptions: {\n// \t\t\tcolumns: ':visible'\n// \t\t}\n// \t}]\n// \t,\"dom\":  'B<\"#table-header\" f >t <i> <l> <p>' // https://datatables.net/reference/option/dom\n// \t, colReorder: true\n// \t,\"order\": [[ 0, \"asc\" ]]\n// \t, iDisplayLength: ppms.prop.iDisplayLength\n// \t, \"lengthMenu\": [[10, 25, 50, 100, 1000, -1], [10, 25, 50, 100, 1000, \"All\"]]\n// \t, reponsive:true\n// \t, \"deferRender\": true\t\n//}\n\n// see // \t// ~/projects/ppms/wireframe/src/js/lib/page.js\nfunction checkServerJsonData(json,url){\n\tStore.inserDataLoaded(json);\t\n\treturn json;\n}\n\nfunction loadData(){\n\treturn {\n\t\turl:\"./data/doc1.json\",\n\t\tcache:false,\n\t\t\"dataSrc\":function(json){\n// \t\t\t$.each(json,function(index,el){\n// \t\t\t\tif (el.ep !== el.ceu){\n// \t\t\t\t\tel.agreement=JsDiff.diffWords(el.ep, el.ceu);\n// \t\t\t\t}\n//\t\t\t\t\n// \t\t\t});\n\t\t\treturn checkServerJsonData(json);\n\t\t}\n\t};\t\n}\n\nfunction changePage(forward){\n\t// https://datatables.net/reference/api/page.info()\n\t// https://datatables.net/reference/api/page()\n\tvar pageinfo=table.page.info();\n\tvar pages=pageinfo.pages;\n\tvar current=pageinfo.page;\n\tvar nextPage;\n\n\tif (forward){\n\t\tif (current>=(pages-1)){\n\t\t\tnextPage=0;\n\t\t} else {\n\t\t\tnextPage=current+1;\t\t\t\t\t\n\t\t}\n\t} else {\n\t\tif (current<=0){\n\t\t\tnextPage=pages-1;\t\t\t\t\t\n\t\t} else {\n\t\t\tnextPage=current-1;\n\t\t}\n\t}\n\ttable.page(nextPage).draw(false);\n\n\tvar jTable=$(el);\n\tvar listSelected=jTable.find(\"tr.selected\");\n\tif (listSelected.length===0){\n\t\tlistSelected=jTable.find(\"tr:eq(1)\");\n\t\tlistSelected.addClass('selected');\n\t}\n\t\n\tviewport.scrollToElement(listSelected);\t\n}\n\nfunction changeSelection(forward){\n\tvar jTable=$(el);\n\tvar listSelected=jTable.find(\"tr.selected\");\n\t\n\tif (listSelected.length === 0) {\n\t\t// none selected, select the first or the last\n\t\tif (forward) { // Select the first element that is the second row. The first row is the header.\n\t\t\tjTable.find(\"tr:eq(1)\").toggleClass('selected');\n\t\t\t\n\t\t\tviewport.scrollToElement(jTable.find(\"tr:eq(1)\"));\n\t\t\t\n\t\t} else { // select the last elemnt\n\t\t\tjTable.find(\"tr:last\").toggleClass('selected');\n\t\t\tviewport.scrollToElement(jTable.find(\"tr:last\"));\n\t\t}\n\t} else {\n\t\tif (forward) {\n\t\t\tvar next=listSelected.next();\n\t\t\tif (next.length === 0) {\n\t\t\t\tnext=jTable.find(\"tr:eq(1)\");\n\t\t\t}\n\t\t\tnext.toggleClass('selected');\n\t\t\tviewport.scrollToElement(next);\n\t\t} else {\n\t\t\tvar prev=listSelected.prev();\n\t\t\t\n\t\t\tif (prev.length === 0) {\n\t\t\t\tprev=jTable.find(\"tr:last\");\n\t\t\t}\n\t\t\tprev.toggleClass('selected');\n\t\t\tviewport.scrollToElement(prev);\n\t\t}\n\t\t\n\t\tlistSelected.toggleClass('selected');\n\t}\n}\n\nfunction editCell(data,row,tr,td,id,rowIndex){\n\tvar editor=$(\"#editor\");\n\n\t// check if the edir is already present in the cell\n\tif ($.contains( td, editor[0] )){\n\t\treturn ;\n\t}\n\n\tvar text=$(td).text();\n\tvar height = $(td).height();\n\tvar width = $(td).width();\n\n\t// close the current editor if any\n\tcloseCellEditor();\n\n\t// create the new editor\n\t$(td).html(\"<textarea id='editor'></textarea>\");\n\tcurrentRow=data;\n\tconsole.log(\"1\"+currentRow);\n\tcurrentId=id;\n\tcurrentRowIndex=rowIndex;\n\n\t// reload the newly created editor\n\teditor=$(\"#editor\");\n\teditor.val(text);\n\t\n    editor.css({'width':width,'height': height});\n\teditor.focus();\n}\n\nfunction closeCellEditor(){\n\tvar editor=$(\"#editor\");\n\tif (currentRow!==null && editor.length>0){\n\t\t// TODO\n\t\tconsole.log(\"2\"+currentRow);\n\t\tvar value=editor.val();\n\t\teditor.parent().text(value);\n\t\tcurrentRow[currentId]=value;\n\t\tcurrentRow=null;\t\t\n\n\t\t// display\n\t\ttable.cells( currentRowIndex, '' ).invalidate();\n\t\t// table.cells( currentRowIndex, '' ).render( 'display' );\n\t}\n}\n\nfunction tableClickEventhadler(event) {\n\t// var td=this;\n\t// event.target\n\t// this==event.currentTarget\n\t\n\t//\n\t// https://datatables.net/reference/type/column-selector\n\t//\n\t// var columnData = table.column( $(this).index()+':visIdx' ).data();\n\t// table.column( $(this).index()+':visIdx' );\n\n\t//\n\t// https://datatables.net/reference/api/cells().render()\n\t//\n\t// var idx = table.cell( this ).index().row;\n    // var data = table.cells( idx, '' ).render( 'display' );\n\n\tvar column=table.column( $(event.currentTarget).index()+':visIdx' );\n\tvar id=column.header().id;\n\n\tif (id !== \"ceu\" && id!==\"ep\"){\n\t\treturn ;\n\t}\n\n\tvar td=event.currentTarget;\n\tvar tr = $(td).closest('tr');\n\tvar row=table.row( tr );\n\tvar data=row.data();\n\tvar rowIndex = table.cell( this ).index().row;\n\t\t\t\t\t\t\n\teditCell(data,row,tr,td,id,rowIndex);\n}\n\n\nfunction changeDiffing(event){\n\tdoDiffing=!doDiffing;\n\n\t// table.cells( currentRowIndex, '' ).invalidate();\n\t// table.draw();\n\t// table.search('').draw();\n\ttable.cells( ).invalidate();\n\t// table.column( 'agreement:name' ).invalidate();\n\t// table.column( '#agreement' ).invalidate();\n}\n\nfunction searchKeySelection(event){\n\tvar focused = $(':focus');\n\tvar search=$('input[type=\"search\"]');\n\t\n\tif (focused.get(0) === search.get(0)){\n\t\tconsole.info(\"Blur\");\n\t\tsearch.blur();\n\t} else {\n\t\tconsole.info(\"Focus\");\n\t\tsearch.focus();\n\t}\n\n\tevent.preventDefault();\n\tevent.stopPropagation();\n}\n\n\nfunction previousSelection(event){\n\tchangeSelection(false);\n\tevent.preventDefault();\n}\n\nfunction nextSelection(event){\n\tchangeSelection(true);\n\tevent.preventDefault();\n}\n\nfunction nextPage(event){\n\tchangePage(true);\n\tevent.preventDefault();\n}\n\nfunction previousPage(event){\n\tchangePage(false);\n\tevent.preventDefault();\n}\n\nSINGLETON.handleEvent=function(event){\n\tvar code=event.which;\n\tswitch(code){\n\tcase 37:\n\t\tpreviousPage(event);\n\t\tbreak;\n\tcase 38:\n\t\tpreviousSelection(event);\n\t\tbreak;\n\tcase 39:\n\t\tnextPage(event);\n\t\tbreak;\n\tcase 40:\n\t\tnextSelection(event);\n\t\tbreak;\n\tdefault:\n\t\tconsole.debug(\"Editor Key code:\"+code);\n\t\tbreak;\n\t}\n}\n\nfunction setupEventHandlers(){\n\n\t// $(\"#main\").on('keydown',handleEvent);\n\n\t// KeyboardEvents.shorcut(37,false,previousPage);\n\t// KeyboardEvents.shorcut(39,false,nextPage);\n\t//\n\t// KeyboardEvents.shorcut(38,false,previousSelection);\n\t// KeyboardEvents.shorcut(40,false,nextSelection);\n\t\n\tKeyboardEvents.shorcut(27,false,closeCellEditor); // ESC\n\tKeyboardEvents.shorcut(70,false,searchKeySelection); // F \n\t\n\tKeyboardEvents.shorcut(68,false,changeDiffing); // F \n\n\t\n\t// te problem are child tables of this current tables...\n\t// $(\"table.dataTable > tbody > tr > td\").off(\"click\"); \n\t// $(document).on(\"click\",\"table.dataTable > tbody > tr > td\",tableClickEventhadler); \n\t// $(\"table.dataTable > tbody > tr > td\").click(tableClickEventhadler); \n\n\t$(\"table.dataTable\").delegate(\"td\",\"click\",tableClickEventhadler); \n\t$(\"table.dataTable\").delegate(\"textarea\",\"focusout\",closeCellEditor); \n\t\n\n//\t$(\"table.dataTable > tbody > tr > td > textarea\").click(tableClickEventhadler); \n\n}\n\nfunction initTable(_table){\n\ttable=_table;\n\n\tsetupEventHandlers();\t\n}\n\n\nSINGLETON.render=function(_element){\n\tel=$(_element);\n\n\tviewport=new Viewport();\n\n\tel.on( 'error.dt', function ( e, settings, techNote, message ) {\n        console.log( 'An error has been reported by DataTables: ', message );\n    } ).DataTable({\n\t\t\"columns\": [{ \n\t\t\t\"data\":\"id\",\n\t\t\t\"className\":\"dt-right\",\n\t\t\t\"width\": \"1%\",\n\t\t\t\"type\": \"num\",\n\t\t\t\"searchable\":true,\n\t\t\t\"visible\":true \t\t\t\n\t\t},{\n\t\t\t\"data\":\"ec\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"searchable\":true,\n\t\t\t\"orderable\":false,\n\t\t\t\"width\": \"25%\",\n\t\t\t\"className\":\"dt-left\"\n\t\t},{\n\t\t\t\"data\":\"ep\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"searchable\":true,\n\t\t\t\"orderable\":false,\n\t\t\t\"width\": \"25%\",\n\t\t\t\"className\":\"dt-left\"\n\t\t},{\n\t\t\t\"data\":\"ceu\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"searchable\":true,\n\t\t\t\"orderable\":false,\n\t\t\t\"width\": \"25%\",\n\t\t\t\"className\":\"dt-left\"\n\t\t},{\n\t\t\t\"data\":\"agreement\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"searchable\":true,\n\t\t\t\"orderable\":false,\n\t\t\t\"width\": \"24%\",\n\t\t\t\"className\":\"dt-left\",\n\t\t\trender:function( diff, type, row, meta ){\n\t\t\t\tif (doDiffing && row.ep !== row.ceu){\n\t\t\t\t\tvar diff=JsDiff.diffWords(row.ep, row.ceu);\n\t\t\t\t\trow.agreement=diff;\n\t\t\t\t\t\n\t\t\t\t\tif (diff) {\n\t\t\t\t\t\tvar ret=\"\";\n\t\t\t\t\t\tdiff.forEach(function(part){\n\t\t\t\t\t\t\t// green for additions, red for deletions\n\t\t\t\t\t\t\t// grey for common parts\n\t\t\t\t\t\t\tvar color = part.added ? '#00a500' : \n\t\t\t\t\t\t\t\tpart.removed ? 'red' : 'grey';\n\n\t\t\t\t\t\t\tif (part.added) {\n\t\t\t\t\t\t\t\tret+='<span style=\"font-weight: bold;color:'+color+'\">'+part.value+'</span>';\n\t\t\t\t\t\t\t} else if (part.removed) {\n\t\t\t\t\t\t\t\tret+='<span style=\"font-weight: bold;text-decoration:line-through; color:'+color+'\">'+part.value+'</span>';\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tret+=part.value;\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}]\t\t\t\n\t\t,\"order\": [[ 0, \"asc\" ]]\n\t\t// https://datatables.net/reference/option/dom\n\t\t// ,\"dom\":  'B<\"#table-header\" f >t <i> <l> <p>'\n\t\t// , \"dom\": 'lrtip'\n\t\t// , \"dom\": '<\"wrapper\"flipt>'\n\t\t// , \"dom\": '<lf<t>ip>'\n\t\t// , \"dom\": '<\"top\"i>rt<\"bottom\"flp><\"clear\">'\n\t\t, \"dom\": \"<'#table-header'>\" +\n\t\t\t\"<'row'<'col-sm-3'l><'col-sm-3'i><'col-sm-3'p><'col-sm-3'f>>\" +\n\t\t\t\"<'row'<'col-sm-12'tr>>\" +\n\t\t\t\"<'row'<'col-sm-5'i><'col-sm-7'p>>\"\n\n\t\t, colReorder: true\n\t\t, reponsive:true\n\t\t, iDisplayLength: 10\n \t\t, \"lengthMenu\": [[10, 25, 50, 100, 1000, -1], [10, 25, 50, 100, 1000, \"All\"]]\n\n\t\t,\"initComplete\": function () {\n\t\t\t$(\"#table-header\").append($(\"#table-header-template\").html());\n\n\t\t\tvar _table = this.api();\n\n\t\t\tinitTable(_table);\n\n\t\t}\n\t\t,ajax:loadData()\n\n\t});\t\n};\n\n\nmodule.exports=SINGLETON;\n\n\n","/**\n * GlobalProperties This stores the global properties allowing to\n * overwrite its values\n */\n'use strict';\n\n/*global document:false, sessionStorage: false, console: false, alert: false, $: false, window: false, jQuery:false,  location:false, debugger:false, navigator:false */\n\nvar SINGLETON={};\n\n\nvar PROPERTYES={\n\tDEFAULT_TABLE_TITLE:\"New Table\"\n};\n\nSINGLETON.get=function(name,defaultValue){\n\tif (name && PROPERTYES[name]){\n\t\treturn name;\n\t} else {\n\t\treturn defaultValue;\n\t}\n};\n\nmodule.exports=SINGLETON;\n","/**\n * The Editor main class\n *\n * - The entry point is the render \n */\n'use strict';\n\n/*global document:false, sessionStorage: false, console: false, alert: false, $: false, window: false, jQuery:false,  location:false, debugger:false, navigator:false */\n\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar SINGLETON={};\n\nvar M_keyMap={}; // Modifier key map\nvar NM_keyMap={}; // No Modifier key map\n\nvar defaultFunction=null;\n\nfunction handleEvent(event){\n\tvar code=event.which;\n\tvar f;\n\n\tif (event.altKey || \n\t\tevent.altKey ||\n\t\tevent.ctrlKey ||\n\t\tevent.metaKey ){\n\n\t\tf=M_keyMap[code];\n\t\tif ($.isFunction(f)){\n\t\t\tf(event);\n\t\t\t\n\t\t\t// event.preventDefault();\n\t\t} else {\n\t\t\tif (defaultFunction){\n\t\t\t\tdefaultFunction(event);\n\t\t\t} else {\n\t\t\t\tconsole.debug(\"M Key code:\"+code);\n\t\t\t}\n\t\t}\t\t\t\t\t\t\n\t} else {\n\t\t// ESC KEY Traverses elements is global\n\t\tif ( $(event.target).is(\"body\") || code === 27 ) {\t\t\t\t\t\n\t\t\tf=NM_keyMap[code];\n\t\t\tif ($.isFunction(f)){\n\t\t\t\tf(event);\n\t\t\t\t\n\t\t\t\t// event.preventDefault();\n\t\t\t} else {\n\t\t\t\tif (defaultFunction){\n\t\t\t\t\tdefaultFunction(event);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.debug(\"Key code:\"+code);\n\t\t\t\t}\n\t\t\t}\t\t\t\t\t\t\n\t\t}\n\t}\n\t\n}\n\n\nSINGLETON.shorcut=function(keyCode,modifier,f){\n\tif (keyCode){\n\t\tif (modifier) {\n\t\t\tif ( M_keyMap[keyCode] !== undefined ) {\n\t\t\t\tconsole.warn(\"Overwriting key modifier code:\"+keyCode);\n\t\t\t}\n\t\t\tM_keyMap[keyCode]=f;\n\t\t} else {\n\t\t\tif ( NM_keyMap[keyCode] !== undefined ) {\n\t\t\t\tconsole.warn(\"Overwriting non-modifier key code:\"+keyCode);\n\t\t\t}\n\t\t\tNM_keyMap[keyCode]=f;\n\t\t}\n\t}\n};\n\nSINGLETON.default=function(f){\n\tif ($.isFunction(f)){\n\t\tdefaultFunction=f;\n\t}\n};\n\nSINGLETON.subscriveEvents=function(){\n\t$(document).on('keydown',handleEvent);\n};\n\n\n//SINGLETON.init=function(){\n//\t\n//};\n\nSINGLETON.ready=function(){\n\tSINGLETON.subscriveEvents();\n};\n\nmodule.exports=SINGLETON;\n","/**\n * THis display the document overlay, this means the document index\n *\n */\n'use strict';\n\n/*global document:false, sessionStorage: false, console: false, alert: false, $: false, window: false, jQuery:false,  location:false, debugger:false, navigator:false */\n\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar SINGLETON={};\n\nvar Store = require('./Store');\n\nvar KeyboardEvents=require('./KeyboardEvents');\nvar Viewport=require('./Viewport');\n\nvar opened=false;\nvar viewport;\n\n/**\n * Set the width of the side navigation to 250px and the left margin of the page content to 250px \n */\nfunction openNav() {\n\t\n\tvar html=\"\";\n\n\n\tStore.treeIterate(function(node){\n\t\thtml+='<li class=\"list-group-item node-treeview4\" data-nodeid=\"0\" style=\"color:undefined;background-color:undefined;\" data-cell=\"'+node.cell+'\">'+node.title+'</li>';\t\t\n\t});\n\t\n\t// Store.iterate(function(index,row){\n\t// \tvar value=row[\"id\"];\n\t//\n\t// \tif (value){\n\t// \t\thtml+='<li class=\"list-group-item node-treeview4\" data-nodeid=\"0\" style=\"color:undefined;background-color:undefined;\">Article '+index+'</li>';\n\t// \t\t// html+=\"<button class='btn btn-default'> Article \"+value+\". </button>\";\n\t// \t}\n\t// });\n\n\tvar el=$(\"#mySidenav\");\n\tel.html('<ul class=\"list-group\">'+\n\t\t\thtml+\n\t\t\t'</ul>');\n\t\n\tel.css(\"width\",\"200px\");\n\t\n    document.getElementById(\"main\").style.marginLeft = \"200px\";\n}\n\n/**\n * Set the width of the side navigation to 0 and the left margin of the page content to 0 \n */\nfunction closeNav() {\n    document.getElementById(\"mySidenav\").style.width = \"0\";\n    document.getElementById(\"main\").style.marginLeft = \"0\";\n}\n\nfunction getSelected(){\n\tvar jTable=$(\"#mySidenav\");\n\tvar listSelected=jTable.find(\"li.selected\");\n}\n\nfunction getSelectedNode(){\n\tvar selected=getSelected();\n\n\tif (selected){\n\t\tvar cell=selected.data(\"cell\");\n\t\treturn Tree.getNode(cell);\n\t}\n}\n\nfunction changeSelection(forward){\n\tvar jTable=$(\"#mySidenav\");\n\tvar listSelected=jTable.find(\"li.selected\");\n\t\n\tif (listSelected.length === 0) {\n\t\t// none selected, select the first or the last\n\t\tif (forward) { // Select the first element that is the second row. The first row is the header.\n\t\t\tjTable.find(\"li:eq(1)\").toggleClass('selected');\n\t\t\t\n\t\t\tdebugger;\n\t\t\tviewport.scrollToElement(jTable.find(\"li:eq(1)\"));\n\t\t\t\n\t\t} else { // select the last elemnt\n\t\t\tjTable.find(\"li:last\").toggleClass('selected');\n\t\t\tviewport.scrollToElement(jTable.find(\"li:last\"));\n\t\t}\n\t} else {\n\t\tif (forward) {\n\t\t\tvar next=listSelected.next();\n\t\t\tif (next.length === 0) {\n\t\t\t\tnext=jTable.find(\"li:eq(1)\");\n\t\t\t}\n\t\t\tnext.toggleClass('selected');\n\t\t\tviewport.scrollToElement(next);\n\t\t} else {\n\t\t\tvar prev=listSelected.prev();\n\t\t\t\n\t\t\tif (prev.length === 0) {\n\t\t\t\tprev=jTable.find(\"li:last\");\n\t\t\t}\n\t\t\tprev.toggleClass('selected');\n\t\t\tviewport.scrollToElement(prev);\n\t\t}\n\t\t\n\t\tlistSelected.toggleClass('selected');\n\t}\n}\n\nfunction previousSelection(event){\n\tchangeSelection(false);\n\tevent.preventDefault();\n}\n\nfunction nextSelection(event){\n\tchangeSelection(true);\n\tevent.preventDefault();\n}\n\nfunction nodeUp(event){\n\t\n\tevent.preventDefault();\n}\n\n\nSINGLETON.handleEvent=function(event){\n\tvar code=event.which;\n\tswitch(code){\n\tcase 37:\n\t\tnodeUp(event);\n\t\tbreak;\n\tcase 39:\n\t\tnodeDown(event);\n\t\tbreak;\n\tcase 38:\n\t\tpreviousSelection(event);\n\t\tbreak;\n\tcase 40:\n\t\tnextSelection(event);\n\t\tbreak;\n\tdefault:\n\t\tconsole.debug(\"Editor Key code:\"+code);\n\t\tbreak;\n\t}\n};\n\nSINGLETON.close=function(){\n\tcloseNav();\n\topened=false;\n};\n\nSINGLETON.open=function(){\n\topenNav();\n\topened=true;\n};\n\nSINGLETON.switch=function(){\n\tif (opened){\n\t\tSINGLETON.close();\t\t\n\t} else {\n\t\tSINGLETON.open();\n\t}\n\treturn opened;\n};\n\nSINGLETON.isOpen=function(){\n\treturn opened;\n};\n\nSINGLETON.render=function(){\n\tviewport=new Viewport();\t\n};\n\n\nmodule.exports=SINGLETON;\n","/**\n * This is the Store for the editor. Contains the busines logic\n */\n'use strict';\n\n/*global document:false, sessionStorage: false, console: false, alert: false, $: false, window: false, jQuery:false,  location:false, debugger:false, navigator:false */\n\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar Tree = require('./Tree');\n\nvar SINGLETON={};\n\n//\n// Cell Data Example.\n//\n// var data=[{\n// \t\"id\":1,\n// \t\"ec\":\"text1\",\n// \t\"ep\":\"text2\",\n// \t\"ceu\":\"text3\",\n// \t\"agreement\":\"text4\"\n//\n// }];\n//\n//\n// The cell Id is unique\n//\n\nvar data=[];\n\nSINGLETON.inserDataLoaded=function(_data){\n\tif (_data && $.isArray(_data)){\n\t\tdata=_data;\n\t\tTree.newTree(data,\"Nuevo Documento\");\n\t}\n\treturn data;\n};\n\nSINGLETON.updateCell=function(){\n\t\n};\n\n/**\n * Iterate on all the lements on the cell. If the f return not null,\n * Stops the iteration and returns the value.\n */\nSINGLETON.iterate=function(f){\n\tif ($.isFunction(f) && data.length > 0){\n\t\tvar i=0;\n\t\tvar ret=null;\n\t\t\n\t\tfor (i=0;i<data.length;i++){\n\t\t\tvar element=data[i];\n\n\t\t\tret=f(i,element);\n\n\t\t\tif (ret){\n\t\t\t\tconsole.info(\"Iteration breaked by client in index:\"+i);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\t\t\n\t}\n};\n\n/**\n * Tree iterate from top to down from First to last child.\n * Root node always first.\n * The current node is passed to the iterator function f. If this function return differnt\n * from null or undefined the iteration stop and the value is returned.\n */\nSINGLETON.treeIterate=function(f){\n\treturn Tree.iteratePreOrder(f);\n};\n\n\nmodule.exports=SINGLETON;\n","/**\n * This SINGLETON store the application document tree and manipulate it.\n * \n */\n'use strict';\n\n/*global document:false, sessionStorage: false, console: false, alert: false, $: false, window: false, jQuery:false,  location:false, debugger:false, navigator:false */\n\n\nvar GP = require('./GlobalProperties');\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar SINGLETON={};\n\nvar root=null;\n\n\n//\n// Tree leaf example\n//\n// {\n// \t\"level\":0,\n// \t\"parent\":null,\n// \t\"childs\":[],\n// \t\"title\":\"This is the title\",\n// \t\"cell\":id\n//\n// }];\n//\n//\n// The cell Id is unique\n//\n\n/**\n * this create a leaf, low level\n */\nfunction createLeaf(level,parent,title,cell){\n\treturn {\n\t\tlevel:level,\n\t\tparent:parent,\n\t\ttitle:title,\n\t\tcell:cell,\n\t\tchilds:[]\n\t};\n}\n\n/**\n * Getin automatly the title from the node level in the tree\n * and the order into the parent\n */\nfunction getTitle(level,order){\n\tif (level === 0){\n\t\treturn GP.get(\"DEFAULT_TABLE_TITLE\",\"\");\n\t} else if (level === 1){\n\t\treturn \" Artlcle \"+order;\n\t} else if (level === 2){\n\t\treturn \"  \"+String.fromCharCode(\"A\"+order);\n\t} else if (level === 3){\n\t\treturn String.fromCharCode(\"a\"+order);\n\t} else {\n\t\treturn \"(\"+level+\",\"+order+\")\" ;\t\t\n\t}\n}\n\n/**\n * This generate automalty the title using the parent and \n * assuming the this will be the new last child\n */\nfunction getTitleFromParent(parent){\n\tif (!parent){\n\t\treturn \"\";\n\t} else {\n\t\tvar level=parent.level+1;\n\t\tvar order=parent.childs.length+1;\n\n\t\treturn getTitle(level,order);\n\t}\n}\n\n/**\n * This add a new cell into the parent. The new created node\n * will be the last child of the root.\n */\nfunction addChild(root,cell){\n\tif (!root){\n\t\treturn;\n\t} else {\n\t\troot.childs.push(createLeaf(root.level+1,\n\t\t\t\t\t\t\t\t\troot,\n\t\t\t\t\t\t\t\t\tgetTitleFromParent(root),\n\t\t\t\t\t\t\t\t\tcell\n\t\t\t\t\t\t\t\t   ));\n\t}\n}\n\nfunction iteratePreOrder(root,f){\n\tif (root){\n\t\tvar ret=f(root);\n\n\t\tif (ret){\n\t\t\treturn ret;\n\t\t} else {\n\t\t\t$.each(root.childs,function(index,child){\n\t\t\t\tret=iteratePreOrder(child,f);\n\n\t\t\t\tif (ret){\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * This create a new tree using an array of data\n */\nSINGLETON.newTree=function(data,title){\n\tif (!data || !$.isArray(data)){\n\t\treturn ;\n\t} else {\n\t\troot=createLeaf(0,null,(title)?title:GP.get(\"DEFAULT_TABLE_TITLE\",\"\"),null);\n\n\t\t$.each(data,function(index,element){\n\t\t\t// Ussing the Id ?\n\t\t\taddChild(root,element);\n\t\t});\n\t}\n};\n\n/**\n * Tree iterate from top to down from First to last child.\n * Root node always first.\n * The current node is passed to the iterator function f. If this function return differnt\n * from null or undefined the iteration stop and the value is returned.\n */\nSINGLETON.iteratePreOrder=function(f){\n\tif ($.isFunction(f) && root){\n\t\treturn iteratePreOrder(root,f);\n\t}\n\t\n};\n\n\nmodule.exports=SINGLETON;\n","/**\n * Viewport\n *\n */\n'use strict';\n\n\n/*global document:false, sessionStorage: false, console: false, alert: false, $: false, window: false, jQuery:false,  location:false, debugger:false, navigator:false */\n\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\n\nvar SINGLETON=function () {\n\tvar top,left,bottom,right,width,height;\n\t\n\tfunction init(){\n\t\tvar win=$(window);\n\t\tif (win){\n\t\t\ttop = win.scrollTop();\n\t\t\tleft = win.scrollLeft();\n\t\t\t\n\t\t\theight=win.height();\n\t\t\t\n\t\t\twidth=win.width();\n\t\t\t\n\t\t\tbottom = top + height;\n\t\t\tright = left + width;\n\t\t}\n\t}\n\t\n\tinit();\n\n\treturn {\n\t\t// this update the data related to the croll etc ...\t\t\t\t\n\t\tupdateViewportInformation:function(){\n\t\t\tinit();\n\t\t},\n\t\t// this update the data related to the croll etc ...\t\t\t\t\n\t\tscrollToElement:function(el){\n\t\t\tinit();\n\t\t\tvar distance=this.getVerticalScroll(el);\n\n\t\t\tif (distance === 0) {\n\t\t\t\treturn ;\n\t\t\t} else {\n\t\t\t\t// log.debug(\"WIN SCROL:\"+$(window).scrollTop());\n\t\t\t\t// execute the scroll\n\t\t\t\t$('html, body').animate({\n\t\t\t\t\tscrollTop: top+distance\n\t\t\t\t}, 200);\t\t\t\t\t\t\n\t\t\t}\n\t\t},\n\t\t// returns true if the element is INSIDE the view port\n\t\tcontainsElement:function(el){\n\t\t\tif (el){\n\t\t\t\tvar e=$(el);\n\t\t\t\tvar offset = e.offset();\n\t\t\t\tvar etop=offset.top;\n\t\t\t\tvar eleft=offset.left;\n\t\t\t\t\n\t\t\t\tif ( etop < top ||\t\t\t\t\t\t \n\t\t\t\t\t eleft < left ||\n\t\t\t\t\t (etop+e[0].offsetHeight) > bottom ||\t\t\t\t\t\t \n\t\t\t\t\t (eleft+e[0].offsetWidth) > right ){\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\t\t\t\t\t\t \n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t// if this retuns 0 the element is inside the scroll and dont have to be scrolled\n\t\tgetVerticalScroll:function(el){\n\t\t\tif (el){\n\t\t\t\tvar e=$(el);\n\t\t\t\tvar offset = e.offset();\n\t\t\t\tvar etop=offset.top;\n\t\t\t\tvar eHight=e[0].offsetHeight;\n\t\t\t\t/*\n\t\t\t\t  log.info( \"etop:\"+etop+\n\t\t\t\t  \" top:\"+top+\n\t\t\t\t  \" elbot:\"+(etop+eHight)+\n\t\t\t\t  \" bottom:\"+bottom+\n\t\t\t\t  \"\");\n\t\t\t\t*/\n\t\t\t\tif ( etop < top ||\t\t\t\t\t\t \n\t\t\t\t\t (etop+eHight) > bottom){\n\t\t\t\t\t\n\t\t\t\t\t// element center\n\t\t\t\t\tvar ec=etop+(eHight/2);\n\t\t\t\t\t// window Center\n\t\t\t\t\tvar wc=top+(height/2);\n\t\t\t\t\t\n\t\t\t\t\tvar scrollDistance=(ec-wc);\n\n\t\t\t\t\t// log.info( \"scrool distance:\"+scrollDistance);\n\n\t\t\t\t\treturn scrollDistance;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\t\t\t\t\t\t \n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t\tcheckPosition:function(delta,ctop,cleft){\n\t\t\treturn (Math.abs(top-ctop)>delta || Math.abs(left-cleft)>delta);\n\t\t},\n\t\tcheckSize:function(delta,cwidth,cheight){\n\t\t\treturn (Math.abs(width-cwidth)>delta || Math.abs(height-cheight)>delta);\n\t\t},\n\t\t// this return true if some part of the view port has changed\n\t\t// a delta num of pixels.\n\t\thasDelta:function(delta,viewport){\n\t\t\tif (viewport.checkPosition(delta,top,left)){\n\t\t\t\treturn true;\n\t\t\t} else if (viewport.checkSize(delta,width,height)){\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\t\t\t\t\t\n\t\t},\n\t\ttoString:function(){\n\t\t\tvar ret=\"[t:\"+top+\n\t\t\t\t\",b:\"+bottom+\n\t\t\t\t\",l:\"+left+\n\t\t\t\t\",r:\"+right+\n\t\t\t\t\"][h:\"+height+\n\t\t\t\t\",w:\"+width+\n\t\t\t\t\"]\";\n\t\t\t\n\t\t\treturn ret;\n\t\t}\n\t};\n};\n\nmodule.exports=SINGLETON;\n","/**\n * Appication entry point\n */\n'use strict';\n\n/*global document:false, sessionStorage: false, console: false, alert: false, $: false, window: false, jQuery:false,  location:false, debugger:false, navigator:false */\n\nconsole.log(\"Hello wolrd!\");\n\nvar $ = (typeof window !== \"undefined\" ? window['$'] : typeof global !== \"undefined\" ? global['$'] : null);\nvar Q = require('q');\n\n\nvar Editor = require('./Editor');\nvar ConsolidatedView = require('./ConsolidatedView');\nvar Overlay = require('./Overlay');\n\nvar KeyboardEvents=require('./KeyboardEvents');\n\n\n$(document).ready(function() {\n    console.log( \"ready!\" );\n\n\t// The keyboard events\n\tKeyboardEvents.ready();\n\n\t// render the table\n\tEditor.render(\"#table\");\n\n\t// Render\n\tOverlay.render();\n\n\tif (Overlay.isOpen()){\n\t\tKeyboardEvents.default(Overlay.handleEvent);\n\t} else {\n\t\tKeyboardEvents.default(Editor.handleEvent);\n\t}\n\t\n\t// T\n\tKeyboardEvents.shorcut(84,false,function(){\n\t\tif (Overlay.switch()){\n\t\t\tKeyboardEvents.default(Overlay.handleEvent);\n\t\t} else {\n\t\t\tKeyboardEvents.default(Editor.handleEvent);\n\t\t}\n\t});\t\n\n\tKeyboardEvents.shorcut(67,false,function(){ // C\n\t\tconsole.info(\"Consolidated view\");\n\t\t\n\t\t$(\"#container-table\").hide();\n\t\tConsolidatedView.render(\"#container-consolidated-view\",\"ep\");\t\t\n\t\t$(\"#container-consolidated-view\").fadeIn();\n\t\t\n\t});\n\n\tKeyboardEvents.shorcut(86,false,function(){ //V\n\t\tconsole.info(\"Consolidated view\");\n\t\t\n\t\t$(\"#container-table\").hide();\n\t\tConsolidatedView.render(\"#container-consolidated-view\",\"ceu\");\t\t\n\t\t$(\"#container-consolidated-view\").fadeIn();\n\t\t\n\t});\n\n\tKeyboardEvents.shorcut(66,false,function(){ //B\n\t\tconsole.info(\"Consolidated view\");\n\t\t\n\t\t$(\"#container-table\").hide();\n\t\tConsolidatedView.render(\"#container-consolidated-view\",\"agreement\");\t\t\n\t\t$(\"#container-consolidated-view\").fadeIn();\n\t\t\n\t});\n\n\tKeyboardEvents.shorcut(69,false,function(){ //E\n\t\tconsole.info(\"Editor view\");\n\n\t\t$(\"#container-consolidated-view\").hide();\n\t\t$(\"#container-table\").fadeIn();\n\t\t// Editor.render(\"#table\");\n\t});\n\n\t// $('#example').DataTable();\n});\n","// See: http://code.google.com/p/google-diff-match-patch/wiki/API\nexport function convertChangesToDMP(changes) {\n  let ret = [],\n      change,\n      operation;\n  for (let i = 0; i < changes.length; i++) {\n    change = changes[i];\n    if (change.added) {\n      operation = 1;\n    } else if (change.removed) {\n      operation = -1;\n    } else {\n      operation = 0;\n    }\n\n    ret.push([operation, change.value]);\n  }\n  return ret;\n}\n","export function convertChangesToXML(changes) {\n  let ret = [];\n  for (let i = 0; i < changes.length; i++) {\n    let change = changes[i];\n    if (change.added) {\n      ret.push('<ins>');\n    } else if (change.removed) {\n      ret.push('<del>');\n    }\n\n    ret.push(escapeHTML(change.value));\n\n    if (change.added) {\n      ret.push('</ins>');\n    } else if (change.removed) {\n      ret.push('</del>');\n    }\n  }\n  return ret.join('');\n}\n\nfunction escapeHTML(s) {\n  let n = s;\n  n = n.replace(/&/g, '&amp;');\n  n = n.replace(/</g, '&lt;');\n  n = n.replace(/>/g, '&gt;');\n  n = n.replace(/\"/g, '&quot;');\n\n  return n;\n}\n","import Diff from './base';\n\nexport const arrayDiff = new Diff();\narrayDiff.tokenize = arrayDiff.join = function(value) {\n  return value.slice();\n};\n\nexport function diffArrays(oldArr, newArr, callback) { return arrayDiff.diff(oldArr, newArr, callback); }\n","export default function Diff() {}\n\nDiff.prototype = {\n  diff(oldString, newString, options = {}) {\n    let callback = options.callback;\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    this.options = options;\n\n    let self = this;\n\n    function done(value) {\n      if (callback) {\n        setTimeout(function() { callback(undefined, value); }, 0);\n        return true;\n      } else {\n        return value;\n      }\n    }\n\n    // Allow subclasses to massage the input prior to running\n    oldString = this.castInput(oldString);\n    newString = this.castInput(newString);\n\n    oldString = this.removeEmpty(this.tokenize(oldString));\n    newString = this.removeEmpty(this.tokenize(newString));\n\n    let newLen = newString.length, oldLen = oldString.length;\n    let editLength = 1;\n    let maxEditLength = newLen + oldLen;\n    let bestPath = [{ newPos: -1, components: [] }];\n\n    // Seed editLength = 0, i.e. the content starts with the same values\n    let oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n      // Identity per the equality and tokenizer\n      return done([{value: this.join(newString), count: newString.length}]);\n    }\n\n    // Main worker method. checks all permutations of a given edit length for acceptance.\n    function execEditLength() {\n      for (let diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n        let basePath;\n        let addPath = bestPath[diagonalPath - 1],\n            removePath = bestPath[diagonalPath + 1],\n            oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n        if (addPath) {\n          // No one else is going to attempt to use this value, clear it\n          bestPath[diagonalPath - 1] = undefined;\n        }\n\n        let canAdd = addPath && addPath.newPos + 1 < newLen,\n            canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n        if (!canAdd && !canRemove) {\n          // If this path is a terminal then prune\n          bestPath[diagonalPath] = undefined;\n          continue;\n        }\n\n        // Select the diagonal that we want to branch from. We select the prior\n        // path whose position in the new string is the farthest from the origin\n        // and does not pass the bounds of the diff graph\n        if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\n          basePath = clonePath(removePath);\n          self.pushComponent(basePath.components, undefined, true);\n        } else {\n          basePath = addPath;   // No need to clone, we've pulled it from the list\n          basePath.newPos++;\n          self.pushComponent(basePath.components, true, undefined);\n        }\n\n        oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath);\n\n        // If we have hit the end of both strings, then we are done\n        if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n        } else {\n          // Otherwise track this path as a potential candidate and continue.\n          bestPath[diagonalPath] = basePath;\n        }\n      }\n\n      editLength++;\n    }\n\n    // Performs the length of edit iteration. Is a bit fugly as this has to support the\n    // sync and async mode which is never fun. Loops over execEditLength until a value\n    // is produced.\n    if (callback) {\n      (function exec() {\n        setTimeout(function() {\n          // This should not happen, but we want to be safe.\n          /* istanbul ignore next */\n          if (editLength > maxEditLength) {\n            return callback();\n          }\n\n          if (!execEditLength()) {\n            exec();\n          }\n        }, 0);\n      }());\n    } else {\n      while (editLength <= maxEditLength) {\n        let ret = execEditLength();\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n  },\n\n  pushComponent(components, added, removed) {\n    let last = components[components.length - 1];\n    if (last && last.added === added && last.removed === removed) {\n      // We need to clone here as the component clone operation is just\n      // as shallow array clone\n      components[components.length - 1] = {count: last.count + 1, added: added, removed: removed };\n    } else {\n      components.push({count: 1, added: added, removed: removed });\n    }\n  },\n  extractCommon(basePath, newString, oldString, diagonalPath) {\n    let newLen = newString.length,\n        oldLen = oldString.length,\n        newPos = basePath.newPos,\n        oldPos = newPos - diagonalPath,\n\n        commonCount = 0;\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n      newPos++;\n      oldPos++;\n      commonCount++;\n    }\n\n    if (commonCount) {\n      basePath.components.push({count: commonCount});\n    }\n\n    basePath.newPos = newPos;\n    return oldPos;\n  },\n\n  equals(left, right) {\n    return left === right;\n  },\n  removeEmpty(array) {\n    let ret = [];\n    for (let i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n    return ret;\n  },\n  castInput(value) {\n    return value;\n  },\n  tokenize(value) {\n    return value.split('');\n  },\n  join(chars) {\n    return chars.join('');\n  }\n};\n\nfunction buildValues(diff, components, newString, oldString, useLongestToken) {\n  let componentPos = 0,\n      componentLen = components.length,\n      newPos = 0,\n      oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    let component = components[componentPos];\n    if (!component.removed) {\n      if (!component.added && useLongestToken) {\n        let value = newString.slice(newPos, newPos + component.count);\n        value = value.map(function(value, i) {\n          let oldValue = oldString[oldPos + i];\n          return oldValue.length > value.length ? oldValue : value;\n        });\n\n        component.value = diff.join(value);\n      } else {\n        component.value = diff.join(newString.slice(newPos, newPos + component.count));\n      }\n      newPos += component.count;\n\n      // Common case\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n      oldPos += component.count;\n\n      // Reverse add and remove so removes are output first to match common convention\n      // The diffing algorithm is tied to add then remove output and this is the simplest\n      // route to get the desired output with minimal overhead.\n      if (componentPos && components[componentPos - 1].added) {\n        let tmp = components[componentPos - 1];\n        components[componentPos - 1] = components[componentPos];\n        components[componentPos] = tmp;\n      }\n    }\n  }\n\n  // Special case handle for when one terminal is ignored. For this case we merge the\n  // terminal into the prior string and drop the change.\n  let lastComponent = components[componentLen - 1];\n  if (componentLen > 1\n      && (lastComponent.added || lastComponent.removed)\n      && diff.equals('', lastComponent.value)) {\n    components[componentLen - 2].value += lastComponent.value;\n    components.pop();\n  }\n\n  return components;\n}\n\nfunction clonePath(path) {\n  return { newPos: path.newPos, components: path.components.slice(0) };\n}\n","import Diff from './base';\n\nexport const characterDiff = new Diff();\nexport function diffChars(oldStr, newStr, callback) { return characterDiff.diff(oldStr, newStr, callback); }\n","import Diff from './base';\n\nexport const cssDiff = new Diff();\ncssDiff.tokenize = function(value) {\n  return value.split(/([{}:;,]|\\s+)/);\n};\n\nexport function diffCss(oldStr, newStr, callback) { return cssDiff.diff(oldStr, newStr, callback); }\n","import Diff from './base';\nimport {lineDiff} from './line';\n\nconst objectPrototypeToString = Object.prototype.toString;\n\n\nexport const jsonDiff = new Diff();\n// Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\njsonDiff.useLongestToken = true;\n\njsonDiff.tokenize = lineDiff.tokenize;\njsonDiff.castInput = function(value) {\n  const {undefinedReplacement} = this.options;\n\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value), function(k, v) {\n    if (typeof v === 'undefined') {\n      return undefinedReplacement;\n    }\n\n    return v;\n  }, '  ');\n};\njsonDiff.equals = function(left, right) {\n  return Diff.prototype.equals(left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n};\n\nexport function diffJson(oldObj, newObj, options) { return jsonDiff.diff(oldObj, newObj, options); }\n\n// This function handles the presence of circular references by bailing out when encountering an\n// object that is already on the \"stack\" of items being processed.\nexport function canonicalize(obj, stack, replacementStack) {\n  stack = stack || [];\n  replacementStack = replacementStack || [];\n\n  let i;\n\n  for (i = 0; i < stack.length; i += 1) {\n    if (stack[i] === obj) {\n      return replacementStack[i];\n    }\n  }\n\n  let canonicalizedObj;\n\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\n    stack.push(obj);\n    canonicalizedObj = new Array(obj.length);\n    replacementStack.push(canonicalizedObj);\n    for (i = 0; i < obj.length; i += 1) {\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack);\n    }\n    stack.pop();\n    replacementStack.pop();\n    return canonicalizedObj;\n  }\n\n  if (obj && obj.toJSON) {\n    obj = obj.toJSON();\n  }\n\n  if (typeof obj === 'object' && obj !== null) {\n    stack.push(obj);\n    canonicalizedObj = {};\n    replacementStack.push(canonicalizedObj);\n    let sortedKeys = [],\n        key;\n    for (key in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(key)) {\n        sortedKeys.push(key);\n      }\n    }\n    sortedKeys.sort();\n    for (i = 0; i < sortedKeys.length; i += 1) {\n      key = sortedKeys[i];\n      canonicalizedObj[key] = canonicalize(obj[key], stack, replacementStack);\n    }\n    stack.pop();\n    replacementStack.pop();\n  } else {\n    canonicalizedObj = obj;\n  }\n  return canonicalizedObj;\n}\n","import Diff from './base';\nimport {generateOptions} from '../util/params';\n\nexport const lineDiff = new Diff();\nlineDiff.tokenize = function(value) {\n  let retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/);\n\n  // Ignore the final empty token that occurs if the string ends with a new line\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  }\n\n  // Merge the content and line separators into single tokens\n  for (let i = 0; i < linesAndNewlines.length; i++) {\n    let line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nexport function diffLines(oldStr, newStr, callback) { return lineDiff.diff(oldStr, newStr, callback); }\nexport function diffTrimmedLines(oldStr, newStr, callback) {\n  let options = generateOptions(callback, {ignoreWhitespace: true});\n  return lineDiff.diff(oldStr, newStr, options);\n}\n","import Diff from './base';\n\n\nexport const sentenceDiff = new Diff();\nsentenceDiff.tokenize = function(value) {\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n};\n\nexport function diffSentences(oldStr, newStr, callback) { return sentenceDiff.diff(oldStr, newStr, callback); }\n","import Diff from './base';\nimport {generateOptions} from '../util/params';\n\n// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\nconst extendedWordChars = /^[a-zA-Z\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}]+$/u;\n\nconst reWhitespace = /\\S/;\n\nexport const wordDiff = new Diff();\nwordDiff.equals = function(left, right) {\n  return left === right || (this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));\n};\nwordDiff.tokenize = function(value) {\n  let tokens = value.split(/(\\s+|\\b)/);\n\n  // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n  for (let i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2]\n          && extendedWordChars.test(tokens[i])\n          && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nexport function diffWords(oldStr, newStr, callback) {\n  let options = generateOptions(callback, {ignoreWhitespace: true});\n  return wordDiff.diff(oldStr, newStr, options);\n}\nexport function diffWordsWithSpace(oldStr, newStr, callback) {\n  return wordDiff.diff(oldStr, newStr, callback);\n}\n","/* See LICENSE file for terms of use */\n\n/*\n * Text diff implementation.\n *\n * This library supports the following APIS:\n * JsDiff.diffChars: Character by character diff\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\n * JsDiff.diffLines: Line based diff\n *\n * JsDiff.diffCss: Diff targeted at CSS content\n *\n * These methods are based on the implementation proposed in\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\n */\nimport Diff from './diff/base';\nimport {diffChars} from './diff/character';\nimport {diffWords, diffWordsWithSpace} from './diff/word';\nimport {diffLines, diffTrimmedLines} from './diff/line';\nimport {diffSentences} from './diff/sentence';\n\nimport {diffCss} from './diff/css';\nimport {diffJson, canonicalize} from './diff/json';\n\nimport {diffArrays} from './diff/array';\n\nimport {applyPatch, applyPatches} from './patch/apply';\nimport {parsePatch} from './patch/parse';\nimport {structuredPatch, createTwoFilesPatch, createPatch} from './patch/create';\n\nimport {convertChangesToDMP} from './convert/dmp';\nimport {convertChangesToXML} from './convert/xml';\n\nexport {\n  Diff,\n\n  diffChars,\n  diffWords,\n  diffWordsWithSpace,\n  diffLines,\n  diffTrimmedLines,\n  diffSentences,\n\n  diffCss,\n  diffJson,\n\n  diffArrays,\n\n  structuredPatch,\n  createTwoFilesPatch,\n  createPatch,\n  applyPatch,\n  applyPatches,\n  parsePatch,\n  convertChangesToDMP,\n  convertChangesToXML,\n  canonicalize\n};\n","import {parsePatch} from './parse';\nimport distanceIterator from '../util/distance-iterator';\n\nexport function applyPatch(source, uniDiff, options = {}) {\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  if (Array.isArray(uniDiff)) {\n    if (uniDiff.length > 1) {\n      throw new Error('applyPatch only works with a single input.');\n    }\n\n    uniDiff = uniDiff[0];\n  }\n\n  // Apply the diff to the input\n  let lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      hunks = uniDiff.hunks,\n\n      compareLine = options.compareLine || ((lineNumber, line, operation, patchContent) => line === patchContent),\n      errorCount = 0,\n      fuzzFactor = options.fuzzFactor || 0,\n      minLine = 0,\n      offset = 0,\n\n      removeEOFNL,\n      addEOFNL;\n\n  /**\n   * Checks if the hunk exactly fits on the provided location\n   */\n  function hunkFits(hunk, toPos) {\n    for (let j = 0; j < hunk.lines.length; j++) {\n      let line = hunk.lines[j],\n          operation = line[0],\n          content = line.substr(1);\n\n      if (operation === ' ' || operation === '-') {\n        // Context sanity check\n        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n          errorCount++;\n\n          if (errorCount > fuzzFactor) {\n            return false;\n          }\n        }\n        toPos++;\n      }\n    }\n\n    return true;\n  }\n\n  // Search best fit offsets for each hunk based on the previous ones\n  for (let i = 0; i < hunks.length; i++) {\n    let hunk = hunks[i],\n        maxLine = lines.length - hunk.oldLines,\n        localOffset = 0,\n        toPos = offset + hunk.oldStart - 1;\n\n    let iterator = distanceIterator(toPos, minLine, maxLine);\n\n    for (; localOffset !== undefined; localOffset = iterator()) {\n      if (hunkFits(hunk, toPos + localOffset)) {\n        hunk.offset = offset += localOffset;\n        break;\n      }\n    }\n\n    if (localOffset === undefined) {\n      return false;\n    }\n\n    // Set lower text limit to end of the current hunk, so next ones don't try\n    // to fit over already patched text\n    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n  }\n\n  // Apply patch hunks\n  for (let i = 0; i < hunks.length; i++) {\n    let hunk = hunks[i],\n        toPos = hunk.offset + hunk.newStart - 1;\n    if (hunk.newLines == 0) { toPos++; }\n\n    for (let j = 0; j < hunk.lines.length; j++) {\n      let line = hunk.lines[j],\n          operation = line[0],\n          content = line.substr(1),\n          delimiter = hunk.linedelimiters[j];\n\n      if (operation === ' ') {\n        toPos++;\n      } else if (operation === '-') {\n        lines.splice(toPos, 1);\n        delimiters.splice(toPos, 1);\n      /* istanbul ignore else */\n      } else if (operation === '+') {\n        lines.splice(toPos, 0, content);\n        delimiters.splice(toPos, 0, delimiter);\n        toPos++;\n      } else if (operation === '\\\\') {\n        let previousOperation = hunk.lines[j - 1] ? hunk.lines[j - 1][0] : null;\n        if (previousOperation === '+') {\n          removeEOFNL = true;\n        } else if (previousOperation === '-') {\n          addEOFNL = true;\n        }\n      }\n    }\n  }\n\n  // Handle EOFNL insertion/removal\n  if (removeEOFNL) {\n    while (!lines[lines.length - 1]) {\n      lines.pop();\n      delimiters.pop();\n    }\n  } else if (addEOFNL) {\n    lines.push('');\n    delimiters.push('\\n');\n  }\n  for (let _k = 0; _k < lines.length - 1; _k++) {\n    lines[_k] = lines[_k] + delimiters[_k];\n  }\n  return lines.join('');\n}\n\n// Wrapper that supports multiple file patches via callbacks.\nexport function applyPatches(uniDiff, options) {\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  let currentIndex = 0;\n  function processIndex() {\n    let index = uniDiff[currentIndex++];\n    if (!index) {\n      return options.complete();\n    }\n\n    options.loadFile(index, function(err, data) {\n      if (err) {\n        return options.complete(err);\n      }\n\n      let updatedContent = applyPatch(data, index, options);\n      options.patched(index, updatedContent, function(err) {\n        if (err) {\n          return options.complete(err);\n        }\n\n        processIndex();\n      });\n    });\n  }\n  processIndex();\n}\n","import {diffLines} from '../diff/line';\n\nexport function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  if (!options) {\n    options = {};\n  }\n  if (typeof options.context === 'undefined') {\n    options.context = 4;\n  }\n\n  const diff = diffLines(oldStr, newStr, options);\n  diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier\n\n  function contextLines(lines) {\n    return lines.map(function(entry) { return ' ' + entry; });\n  }\n\n  let hunks = [];\n  let oldRangeStart = 0, newRangeStart = 0, curRange = [],\n      oldLine = 1, newLine = 1;\n  for (let i = 0; i < diff.length; i++) {\n    const current = diff[i],\n          lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n    current.lines = lines;\n\n    if (current.added || current.removed) {\n      // If we have previous context, start with that\n      if (!oldRangeStart) {\n        const prev = diff[i - 1];\n        oldRangeStart = oldLine;\n        newRangeStart = newLine;\n\n        if (prev) {\n          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n          oldRangeStart -= curRange.length;\n          newRangeStart -= curRange.length;\n        }\n      }\n\n      // Output our changes\n      curRange.push(... lines.map(function(entry) {\n        return (current.added ? '+' : '-') + entry;\n      }));\n\n      // Track the updated file position\n      if (current.added) {\n        newLine += lines.length;\n      } else {\n        oldLine += lines.length;\n      }\n    } else {\n      // Identical context lines. Track line changes\n      if (oldRangeStart) {\n        // Close out any changes that have been output (or join overlapping)\n        if (lines.length <= options.context * 2 && i < diff.length - 2) {\n          // Overlapping\n          curRange.push(... contextLines(lines));\n        } else {\n          // end the range and output\n          let contextSize = Math.min(lines.length, options.context);\n          curRange.push(... contextLines(lines.slice(0, contextSize)));\n\n          let hunk = {\n            oldStart: oldRangeStart,\n            oldLines: (oldLine - oldRangeStart + contextSize),\n            newStart: newRangeStart,\n            newLines: (newLine - newRangeStart + contextSize),\n            lines: curRange\n          };\n          if (i >= diff.length - 2 && lines.length <= options.context) {\n            // EOF is inside this hunk\n            let oldEOFNewline = (/\\n$/.test(oldStr));\n            let newEOFNewline = (/\\n$/.test(newStr));\n            if (lines.length == 0 && !oldEOFNewline) {\n              // special case: old has no eol and no trailing context; no-nl can end up before adds\n              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n            } else if (!oldEOFNewline || !newEOFNewline) {\n              curRange.push('\\\\ No newline at end of file');\n            }\n          }\n          hunks.push(hunk);\n\n          oldRangeStart = 0;\n          newRangeStart = 0;\n          curRange = [];\n        }\n      }\n      oldLine += lines.length;\n      newLine += lines.length;\n    }\n  }\n\n  return {\n    oldFileName: oldFileName, newFileName: newFileName,\n    oldHeader: oldHeader, newHeader: newHeader,\n    hunks: hunks\n  };\n}\n\nexport function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  const diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);\n\n  const ret = [];\n  if (oldFileName == newFileName) {\n    ret.push('Index: ' + oldFileName);\n  }\n  ret.push('===================================================================');\n  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n  for (let i = 0; i < diff.hunks.length; i++) {\n    const hunk = diff.hunks[i];\n    ret.push(\n      '@@ -' + hunk.oldStart + ',' + hunk.oldLines\n      + ' +' + hunk.newStart + ',' + hunk.newLines\n      + ' @@'\n    );\n    ret.push.apply(ret, hunk.lines);\n  }\n\n  return ret.join('\\n') + '\\n';\n}\n\nexport function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n}\n","export function parsePatch(uniDiff, options = {}) {\n  let diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      list = [],\n      i = 0;\n\n  function parseIndex() {\n    let index = {};\n    list.push(index);\n\n    // Parse diff metadata\n    while (i < diffstr.length) {\n      let line = diffstr[i];\n\n      // File header found, end parsing diff metadata\n      if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n        break;\n      }\n\n      // Diff index\n      let header = (/^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/).exec(line);\n      if (header) {\n        index.index = header[1];\n      }\n\n      i++;\n    }\n\n    // Parse file headers if they are defined. Unified diff requires them, but\n    // there's no technical issues to have an isolated hunk without file header\n    parseFileHeader(index);\n    parseFileHeader(index);\n\n    // Parse hunks\n    index.hunks = [];\n\n    while (i < diffstr.length) {\n      let line = diffstr[i];\n\n      if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(line)) {\n        break;\n      } else if (/^@@/.test(line)) {\n        index.hunks.push(parseHunk());\n      } else if (line && options.strict) {\n        // Ignore unexpected content unless in strict mode\n        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(line));\n      } else {\n        i++;\n      }\n    }\n  }\n\n  // Parses the --- and +++ headers, if none are found, no lines\n  // are consumed.\n  function parseFileHeader(index) {\n    const headerPattern = /^(---|\\+\\+\\+)\\s+([\\S ]*)(?:\\t(.*?)\\s*)?$/;\n    const fileHeader = headerPattern.exec(diffstr[i]);\n    if (fileHeader) {\n      let keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n      index[keyPrefix + 'FileName'] = fileHeader[2];\n      index[keyPrefix + 'Header'] = fileHeader[3];\n\n      i++;\n    }\n  }\n\n  // Parses a hunk\n  // This assumes that we are at the start of a hunk.\n  function parseHunk() {\n    let chunkHeaderIndex = i,\n        chunkHeaderLine = diffstr[i++],\n        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n\n    let hunk = {\n      oldStart: +chunkHeader[1],\n      oldLines: +chunkHeader[2] || 1,\n      newStart: +chunkHeader[3],\n      newLines: +chunkHeader[4] || 1,\n      lines: [],\n      linedelimiters: []\n    };\n\n    let addCount = 0,\n        removeCount = 0;\n    for (; i < diffstr.length; i++) {\n      // Lines starting with '---' could be mistaken for the \"remove line\" operation\n      // But they could be the header for the next file. Therefore prune such cases out.\n      if (diffstr[i].indexOf('--- ') === 0\n            && (i + 2 < diffstr.length)\n            && diffstr[i + 1].indexOf('+++ ') === 0\n            && diffstr[i + 2].indexOf('@@') === 0) {\n          break;\n      }\n      let operation = diffstr[i][0];\n\n      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n        hunk.lines.push(diffstr[i]);\n        hunk.linedelimiters.push(delimiters[i] || '\\n');\n\n        if (operation === '+') {\n          addCount++;\n        } else if (operation === '-') {\n          removeCount++;\n        } else if (operation === ' ') {\n          addCount++;\n          removeCount++;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Handle the empty block count case\n    if (!addCount && hunk.newLines === 1) {\n      hunk.newLines = 0;\n    }\n    if (!removeCount && hunk.oldLines === 1) {\n      hunk.oldLines = 0;\n    }\n\n    // Perform optional sanity checking\n    if (options.strict) {\n      if (addCount !== hunk.newLines) {\n        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n      if (removeCount !== hunk.oldLines) {\n        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n    }\n\n    return hunk;\n  }\n\n  while (i < diffstr.length) {\n    parseIndex();\n  }\n\n  return list;\n}\n","// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\nexport default function(start, minLine, maxLine) {\n  let wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      }\n\n      // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n      if (start + localOffset <= maxLine) {\n        return localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      }\n\n      // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n      if (minLine <= start - localOffset) {\n        return -localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    }\n\n    // We tried to fit hunk before text beginning and beyond text lenght, then\n    // hunk can't fit on the text. Return undefined\n  };\n}\n","export function generateOptions(options, defaults) {\n  if (typeof options === 'function') {\n    defaults.callback = options;\n  } else if (options) {\n    for (let name in options) {\n      /* istanbul ignore else */\n      if (options.hasOwnProperty(name)) {\n        defaults[name] = options[name];\n      }\n    }\n  }\n  return defaults;\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}